📘 Project Name: Course Management System

🔗 Local Frontend: http://localhost:5173  
🔗 Local Backend: http://localhost:5000/api/courses
🔗 Host Link: https://course-manager-536h.onrender.com/

🎯 Objective:
Build a full-stack application to manage educational courses. This project teaches students how to integrate a MongoDB-backed REST API with a React frontend, including advanced query features like filtering, searching, sorting, pagination, and aggregation.

🧠 Concepts Covered (Unit 4):
▫ MongoDB schema design using Mongoose
▫ RESTful APIs with Express.js
▫ Backend filtering, search, sort, pagination, aggregation
▫ React state management (useState, useEffect)
▫ axios for frontend-backend communication
▫ Component-based architecture
▫ Aggregation using MongoDB’s `$group`

🛠️ Features Implemented:
▫ Add, update, delete courses with title, category, instructor, and description
▫ View a list of all courses
▫ Filter by instructor or category
▫ Search course titles (case-insensitive)
▫ Sort courses by created date (ascending/descending)
▫ Automatically normalize categories to lowercase in DB
▫ Display total course count by category (aggregation)

📂 Backend Structure:
backend/
├── config/db.js                 # MongoDB connection setup
├── models/Course.js            # Mongoose schema for course
├── controllers/courseController.js  # Business logic
├── routes/courseRoutes.js      # API routing
├── server.js                   # Entry point
├── .env                        # Mongo URI and port config
└── package.json                # Dependencies and scripts

📂 Frontend Structure:
frontend/
├── App.jsx                     # Core app logic
├── components/
│   ├── CourseForm.jsx          # Create/update form
│   ├── CourseList.jsx          # Lists courses
│   ├── CourseItem.jsx          # Single course display
│   └── CourseStats.jsx         # Aggregation: category counts
│   └── Filters.jsx             # Search, filter, and sort controls
├── main.jsx                    # Entry point
└── package.json                # Frontend dependencies

✅ Sample Output:
+-------------------------------------------------------------+
| Title: React for Beginners                                  |
| Instructor: Ravi | Category: Web | Created: 2024-10-03       |
| Description: Learn the basics of React                      |
| [Edit] [Delete]                                              |
+-------------------------------------------------------------+

📊 Courses by Category:
- Web: 3
- Data Science: 2
- Ai: 1

📌 Run Instructions:

🔹 Backend:
1️⃣ `cd backend`
2️⃣ Create `.env` file with:
    MONGO_URI=mongodb://127.0.0.1:27017/course_management
    PORT=5000
3️⃣ `npm install`
4️⃣ `npm run dev`

🔹 Frontend:
1️⃣ `cd frontend`
2️⃣ `npm install`
3️⃣ `npm run dev`
4️⃣ Visit in browser: http://localhost:5173

🧪 API Test Endpoints (Thunder Client/Postman):
▫ POST `/api/courses` → Add course
▫ GET `/api/courses` → Get all (with filters/search/sort)
▫ GET `/api/courses/:id` → Get by ID
▫ PUT `/api/courses/:id` → Update course
▫ DELETE `/api/courses/:id` → Delete course
▫ GET `/api/courses/count/by-category` → Aggregated count

📚 Tips for Teachers:
- Emphasize how query parameters control filtering/searching.
- Discuss how MongoDB aggregation works and why normalization matters.
- Encourage debugging API with Postman before connecting frontend.
