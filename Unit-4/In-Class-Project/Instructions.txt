📘 Project Name: Student Enrollment API

🔗 Local Frontend: http://localhost:5173  
🔗 Local Backend: http://localhost:5000/api/students
🔗 Host Link : https://student-enrollment-59mc.onrender.com/

🎯 Objective:
Build a full-stack web application to manage student records. This project teaches students how to implement backend CRUD operations with MongoDB, and connect them with a basic React frontend for visual interaction.

🧠 Concepts Covered (Unit 4):
▫ Express.js REST API development
▫ MongoDB integration using Mongoose
▫ In-memory vs persistent database difference
▫ API filtering, sorting, and pagination
▫ React state management using useState/useEffect
▫ API integration with axios
▫ Component-based architecture in React

🛠️ Features Implemented:
▫ Add new students with name, course, year, and roll number
▫ View a list of all students
▫ Edit existing student information
▫ Delete students from the list
▫ Filter students by course and year (query parameters)
▫ Sort students alphabetically (by name)
▫ Paginate students with `limit` and `page` query support

📂 Backend Structure:
backend/
├── config/db.js                   # MongoDB connection setup
├── models/Student.js             # Mongoose student schema
├── controllers/studentController.js  # CRUD logic
├── routes/studentRoutes.js       # All /api/students routes
├── server.js                     # Entry point of backend
├── .env                          # Mongo URI & Port config
└── package.json                  # Dependencies & scripts

📂 Frontend Structure:
frontend/
├── App.jsx                       # Root component with main logic
├── components/
│   ├── StudentForm.jsx           # Form to add/edit student
│   ├── StudentList.jsx           # List of students
│   └── StudentItem.jsx           # Single student block
├── main.jsx                      # Vite entry point
└── package.json                  # React + axios dependencies

✅ Sample Output:
+---------------------------------------------------+
| Name: Aman Sharma                                 |
| Course: AI & DS   | Year: 2   | Roll No: AIDS2031 |
| [Edit] [Delete]                                   |
+---------------------------------------------------+

📌 Run Instructions:

🔹 Backend:
1️⃣ `cd backend`
2️⃣ Create `.env` file with:
    MONGO_URI=mongodb://127.0.0.1:27017/student_enrollment
    PORT=5000
3️⃣ `npm install`
4️⃣ `npm run dev`

🔹 Frontend:
1️⃣ `cd frontend`
2️⃣ `npm install`
3️⃣ `npm run dev`
4️⃣ Open in browser: http://localhost:5173

🧪 API Test Endpoints (Thunder Client / Postman):
▫ POST /api/students → Add student
▫ GET /api/students → View all students
▫ GET /api/students?course=AI%20&%20DS → Filter by course
▫ PUT /api/students/:id → Update student
▫ DELETE /api/students/:id → Delete student

📚 Tips for Teachers:
- Guide students step-by-step from backend to frontend
- Use Thunder Client/Postman to test each endpoint before React integration
- Explain how filtering and pagination query params work
- Show how frontend state syncs with DB via Axios calls
